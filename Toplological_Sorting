#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

void toposort(vector<vector<int>>& graph, vector<int>& indegs) {
    int n = indegs.size();
    vector<bool> visited(n, false);
    priority_queue<int, vector<int>, greater<int>> que; // use min heap
    vector<int> res;
    // enqueue 0-in-degree nodes
    for (int i = 0; i < n; ++i) {
        if (indegs[i] == 0)
            que.push(i);
    }
    // bfs
    while (!que.empty()) {
        int node = que.top();
        que.pop();
        res.push_back(node + 1); // 1-indexed
        // mark as visited
        visited[node] = true;
        // update its neighbors and enqueue 0-in-degree ones
        for (int nb : graph[node]) {
            if (visited[nb]) { // a cycle detected
                break;
            }
            if (--indegs[nb] == 0)
                que.push(nb);
        }
    }
    // print
    if (res.size() < n) {
        cout << "Sandro fails." << endl;
    } else {
        for (int i : res) {
            cout << i << " ";
        }
    }
    cout << endl;
}
int main() {
    int n, m;
    cin >> n >> m;
    // initial graph
    vector<vector<int>> graph(n);
    vector<int> indegs(n, 0);
    // parse edges
    for (int j = 0; j < m; ++j) {
        int v1, v2;
        cin >> v1 >> v2;
        // add v2 to v1's neighbor list
        graph[v1 - 1].push_back(v2 - 1);
        // increase v2's indegree
        indegs[v2 - 1]++;
    }
    toposort(graph, indegs);
    return 0;
}
